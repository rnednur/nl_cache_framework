"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/dashboard/page",{

/***/ "(app-pages-browser)/./app/services/api.ts":
/*!*****************************!*\
  !*** ./app/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// API base URL\nconst API_BASE = process.env.NEXT_PUBLIC_API_BASE_URL || \"http://localhost:8000\";\n// API service for cache management\nconst api = {\n    // Get all cache entries with optional filtering\n    async getCacheEntries () {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10, templateType = arguments.length > 2 ? arguments[2] : void 0, searchQuery = arguments.length > 3 ? arguments[3] : void 0;\n        try {\n            let url = \"\".concat(API_BASE, \"/v1/cache?page=\").concat(page, \"&page_size=\").concat(pageSize);\n            if (templateType) {\n                url += \"&template_type=\".concat(encodeURIComponent(templateType));\n            }\n            if (searchQuery) {\n                url += \"&search_query=\".concat(encodeURIComponent(searchQuery));\n            }\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching cache entries:\", error);\n            throw error;\n        }\n    },\n    // Get a single cache entry by ID\n    async getCacheEntry (id) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/v1/cache/\").concat(id));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching cache entry with ID \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    // Create a new cache entry\n    async createCacheEntry (entry) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/v1/cache\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(entry)\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || \"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error creating cache entry:\", error);\n            throw error;\n        }\n    },\n    // Update an existing cache entry\n    async updateCacheEntry (id, entry) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/v1/cache/\").concat(id), {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(entry)\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || \"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error updating cache entry with ID \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    // Delete a cache entry\n    async deleteCacheEntry (id) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/v1/cache/\").concat(id), {\n                method: \"DELETE\"\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n        } catch (error) {\n            console.error(\"Error deleting cache entry with ID \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    // Get cache statistics\n    async getCacheStats (templateType) {\n        try {\n            let url = \"\".concat(API_BASE, \"/v1/cache/stats\");\n            if (templateType && templateType !== \"all\") {\n                url += \"?template_type=\".concat(encodeURIComponent(templateType));\n            }\n            const response = await fetch(url);\n            if (!response.ok) {\n                // If we get a 422 error, provide fallback data\n                if (response.status === 422) {\n                    console.warn(\"Server returned 422 for stats endpoint, using fallback data\");\n                    return {\n                        total_entries: 0,\n                        entries_by_type: {\n                            sql: 0,\n                            api: 0,\n                            url: 0,\n                            workflow: 0\n                        },\n                        recent_usage: [],\n                        popular_entries: []\n                    };\n                }\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching cache stats:\", error);\n            // Return fallback data on any error\n            return {\n                total_entries: 0,\n                entries_by_type: {\n                    sql: 0,\n                    api: 0,\n                    url: 0,\n                    workflow: 0\n                },\n                recent_usage: [],\n                popular_entries: []\n            };\n        }\n    },\n    // Test a cache entry\n    async testCacheEntry (id) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/v1/cache/\").concat(id, \"/test\"), {\n                method: \"POST\"\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error testing cache entry with ID \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    // Apply entity substitution to a template\n    async applyEntitySubstitution (id, entityValues) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/v1/cache/\").concat(id, \"/apply\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    entity_values: entityValues\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error applying entity substitution to cache entry with ID \".concat(id, \":\"), error);\n            throw error;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/api.ts\n"));

/***/ })

});